{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/#Book/","result":{"pageContext":{"currentCategory":"#Book","categories":["All","#AI","#자동화","#회고","#Etc","#React","#DesignPattern","#Web","#Git","#Next.js","#Javascript","#Book"],"edges":[{"node":{"id":"dafb8158-f97d-52c7-b644-7f5a9190f25a","excerpt":"본 글은 쏙쏙 들어오는 함수형 코딩 - 에릭 노먼드 저서를 읽고 학습한 내용을 정리한 글입니다. 들어가며 이전 글에서\n액션과 계산, 데이터의 개념에 대해 알아보았다면, 이번 포스팅은 실습시간! \n여러 예제로 상세히 알아본 개념을 활용해 리팩토링을 해보자.  함수의 입출력 액션에서 계산을 빼내기 위해선 우선 어떠한 함수를 액션 혹은 계산으로 구분할 줄 알아야한다. \n이를 위해선 함수의 입출력에 대한 이해가 필요하다. 모든 함수에는 입력과 출력이 존재한다. 입력은 함수가 동작하기 위해 외부에서 유입되는 정보, 출력은 함수의 결과로 나오는 정보/또다른 동작을 뜻한다.\n함수의 입출력은 아래와 같이 명시적이거나 암묵적인 속성을 가진다.  입력 출력 명시적 인자 리턴값 암묵적 인자 외 다른 입력 리턴값 외 다른 출력 여기서 기억해야 할 것은, 함수가 암묵적 입출력을 가지면 액션, 명시적 입출력을 가지면 계산이 된다. \n또, 어떠한 함수가 액션을 포함한다면 그 함수 전체는 액션이 된다.\n따라서…","fields":{"slug":"/functional-programming-refactoring/"},"frontmatter":{"categories":"#Book","title":"함수형 프로그래밍 | 액션 리팩토링하기","date":"March 26, 2023"}},"next":{"fields":{"slug":"/functional-programming-concept/"}},"previous":{"fields":{"slug":"/js-function-invocation-and-this/"}}},{"node":{"id":"7b174993-ff85-50f8-ba4a-0938acb41b78","excerpt":"본 글은 쏙쏙 들어오는 함수형 코딩 - 에릭 노먼드 저서를 읽고 학습한 내용을 정리한 글입니다. \n예제로 작성한 코드는 책을 옮겨 적은 것이 아니라 학습한 내용을 바탕으로 직접 작성하였습니다. 들어가며 기존에 함수형 프로그래밍이라 하면 순수 함수(결과값이 인자에만 의존)와 부수 효과(결과값을 리턴하는 것 외의 다른 동작)를 구분하고,\n부수 효과를 피하며 순수 함수만을 합성해 프로그래밍하는 기법이란 기조가 강했다. 다만 부수 효과를 완전히 제거하고 순수 함수를 합성하는 것만으로 프로그래밍을 하기는 다소 어렵다는 애매함이 존재했다.\n예를 들어 특정한 리턴값이 존재하지 않는 부수 효과인 1) 전역 상태 수정이나 2) 무언가를 전송하는 동작을 하지 못한다면.. 🤯 프로그래밍하기에 분명한 어려움이 있다. 해당 서적에서는 함수형 프로그래밍을 액션, 계산, 데이터 3가지의 개념으로 프로그래밍하는 것이라 재정의하고 있다.\n에릭 노먼드가 설명하는 함수형 프로그래밍을 이해하기 위해 이 핵심 개념들을…","fields":{"slug":"/functional-programming-concept/"},"frontmatter":{"categories":"#Book","title":"함수형 프로그래밍 | 액션, 계산, 데이터","date":"March 12, 2023"}},"next":{"fields":{"slug":"/regexp/"}},"previous":{"fields":{"slug":"/functional-programming-refactoring/"}}}]}},"staticQueryHashes":["1073350324","2009502679","2938748437"],"slicesMap":{}}
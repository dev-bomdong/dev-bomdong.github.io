{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/#Web/","result":{"pageContext":{"currentCategory":"#Web","categories":["All","#AI","#자동화","#회고","#softSkill","#React","#디자인패턴","#Web","#Git","#Next.js","#Algorithm","#Javascript","#programming","#font","#CSS","#conference","Etc","#Babel"],"edges":[{"node":{"id":"8c20534d-5d2f-5d66-97d3-4a0a18a3272b","excerpt":"HTTP 캐시 웹 브라우저가 서버로부터 받은 데이터를 일시적으로 저장하는 공간을 HTTP 캐시라고 한다. 캐시는 데이터,값을 복사해 임시로 저장하는 장소를 가르키고 AWS에 따르면 다양한 유형이 있다. (데이터의 복사본을 저장하는 장소는 캐시, 캐시에 복사본을 저장하고 있다가 요청시 제공하는 과정 전체는 캐싱이라 한다.) 다만 조건부 요청 헤더와의 상호작용에 대한 이 글에선 HTTP 캐시(웹 캐시)만 다룰 예정. HTTP 캐시는 웹 서비스 성능 최적화에 도움을 주는데, 이미지나 자바스크립트 파일 등을 매번 다운로드하지 않고 복사본을 캐시에 저장해 두었다가 이후의 요청에 (유효시간 검증 후)캐시의 리소스를 사용할 수 있기 때문이다. 우리가 어떤 페이지에 처음 진입할 때와 n번째 진입할 때의 로딩 속도가 차이나는 이유도 여기에 있다. HTTP 캐시는 주로 HTTP 헤더를 통해 제어되는데, 대표적인 헤더는 아래 정도가 있다.  : 캐시의 유효시간을 초 단위로 설정하거나 (max-age)…","fields":{"slug":"/web-http-cache/"},"frontmatter":{"categories":"#Web","title":"HTTP 캐시와 조건부 요청 헤더","date":"February 04, 2024"}},"next":{"fields":{"slug":"/journal-goodbye-2023/"}},"previous":{"fields":{"slug":"/react-compound-pattern/"}}},{"node":{"id":"b4da1f1a-b7c5-5eb7-a9fd-067dbe50f0d3","excerpt":"들어가며 프로젝트를 진행할 때 JWT를 활용한 인증 방식으로 로그인을 구현한 적이 있다. \n백엔드 개발자분과 협업을 하며 key값을 맞춰보고, 인증이 완료되었다고 기뻐하던 추억은 선명하지만.. \nJWT가 무엇인가란 질문에 자신있게 대답할 수 없었다. \n추억속의 JWT를 꺼내 등장 배경부터 인증 프로세스, 장단점까지 알아보자. JWT의 등장배경 JWT가 무엇이고 어떤 형태로 사용되는지도 중요하지만, 먼저 그 배경을 알아야 어떤 장점과 특징을 가지고 있는지 제대로 이해할 수 있다. 그렇다면 JWT는 어떻게 등장하게 되었을까? 이는 HTTP의 특징과 연관된다. HTTP의 특징 HTTP는  (클라이언트의 요청이 처리되면 연결이 끊어짐),  (서버가 클라이언트의 이전 상태를 저장하지 않음)라는 특징을 가지고 있어\n인증이 필요한 페이지에 접근할 경우 서버는 클라이언트가 누구인지 매번 확인해야했다. 예를 들어 쇼핑몰에서 로그인을 하고 마음에 드는 제품을 장바구니에 담을 때마다 다시 로그인을 하…","fields":{"slug":"/web-jwt/"},"frontmatter":{"categories":"#Web","title":"JWT(JSON Web Token), 등장 배경부터 인증 방식까지","date":"June 19, 2022"}},"next":{"fields":{"slug":"/git-commitizen/"}},"previous":{"fields":{"slug":"/react-count-animation/"}}}]}},"staticQueryHashes":["1073350324","2009502679","2938748437"],"slicesMap":{}}
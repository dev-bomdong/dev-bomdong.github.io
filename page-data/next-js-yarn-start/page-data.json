{"componentChunkName":"component---src-templates-blog-template-js","path":"/next-js-yarn-start/","result":{"data":{"cur":{"id":"06b263b8-544b-546b-9c38-90323e7c8898","html":"<h2 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h2>\n<p>흔히 local 환경에서 Next.js 프로젝트를 만들고 <code class=\"language-text\">yarn start</code>를 실행하면 command line에 아래의 흐름대로 표기된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> yarn start\nyarn run v1.22.19\n$ next start\nready - started server on 0.0.0.0:${port}, url: http://localhost:${port}</code></pre></div>\n<p>그렇다면 뒷편에선 코드가 어떻게 돌아가고 있을까?</p>\n<h2 id=\"packagejson\" style=\"position:relative;\"><a href=\"#packagejson\" aria-label=\"packagejson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json</h2>\n<p><a href=\"https://nextjs.org/docs/getting-started/installation#manual-installation\">Next.js 공식 문서</a>에 따르면,\n새로운 프로젝트를 만들 때 필요한 패키지 설치 후 <code class=\"language-text\">package.json</code>에 아래 내용을 수동으로 추가하라고 안내하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next lint\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 중 주목할 스크립트는 <code class=\"language-text\">start</code>로, 해당 스크립트를 입력하면 <code class=\"language-text\">next start</code> 코드가 실행된다.</p>\n<blockquote>\n<p>yarn start 혹은 npm run start으로 입력하면 된다.</p>\n</blockquote>\n<h2 id=\"next-startts\" style=\"position:relative;\"><a href=\"#next-startts\" aria-label=\"next startts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next-start.ts</h2>\n<p>코드가 실행되면 그 이후엔 어떤 파일을 실행시킬까 살펴보니 <code class=\"language-text\">packages/next/src/cli</code> 경로에 <code class=\"language-text\">next-start.ts</code>가 있었다.\n코드를 보니 next start 뒤에 위치하는 옵션 command에 대한 안내를 해주는 로직, 혹여나 잘못 입력했을 때 경고 및 프로세스를 종료하는 로직 등이 담겨있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 옵션 명시 및 검증</span>\n<span class=\"token keyword\">const</span> nextStart<span class=\"token operator\">:</span> <span class=\"token function-variable function\">CliCommand</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> validArgs<span class=\"token operator\">:</span> arg<span class=\"token punctuation\">.</span>Spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Types</span>\n    <span class=\"token string-property property\">'--help'</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--port'</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--hostname'</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'--keepAliveTimeout'</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Aliases</span>\n    <span class=\"token string-property property\">'-h'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--help'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-p'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--port'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-H'</span><span class=\"token operator\">:</span> <span class=\"token string\">'--hostname'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> args<span class=\"token operator\">:</span> arg<span class=\"token punctuation\">.</span>Result<span class=\"token operator\">&lt;</span>arg<span class=\"token punctuation\">.</span>Spec<span class=\"token operator\">></span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    args <span class=\"token operator\">=</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>validArgs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> argv <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//잘못된 cli command를 입력했을 때</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'ARG_UNKNOWN_OPTION'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">printAndExit</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> error\n  <span class=\"token punctuation\">}</span>\n  \n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">'--help'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//  .. cli command 설명 출력 및 프로세스 종료..</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 서버 실행에 필요한 변수 선언</span>\n  <span class=\"token keyword\">const</span> dir <span class=\"token operator\">=</span> <span class=\"token function\">getProjectDir</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'--hostname'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//  keepAliveTimeout 옵션 확인</span>\n  <span class=\"token keyword\">const</span> keepAliveTimeoutArg<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token string\">'--keepAliveTimeout'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> keepAliveTimeoutArg <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      keepAliveTimeoutArg <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printAndExit</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid --keepAliveTimeout, expected a non negative number but received \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keepAliveTimeoutArg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> keepAliveTimeout <span class=\"token operator\">=</span> keepAliveTimeoutArg\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">PHASE_PRODUCTION_SERVER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>dir <span class=\"token operator\">||</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">//생략</span></code></pre></div>\n<p>그리고 가장 하단에서 <code class=\"language-text\">startServer</code>라는 함수를 실행시켜 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//...</span>\n  <span class=\"token comment\">//  서버 실행</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    dir<span class=\"token punctuation\">,</span>\n    isDev<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    hostname<span class=\"token operator\">:</span> host<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">,</span>\n    keepAliveTimeout<span class=\"token punctuation\">,</span>\n    useWorkers<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>appDir<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>정확한 버전은 모르지만 작년 무렵만 해도 아래처럼 바로 startServer 함수 실행 후 appUrl을 만들고 console에도 출력하는 형태였는데,\n현재는 startServer함수 실행까지만 하고 appUrl을 만들고 커맨드라인에 출력하는 로직은 분리되어있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    dir<span class=\"token punctuation\">,</span>\n    hostname<span class=\"token operator\">:</span> host<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">,</span>\n    keepAliveTimeout<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> appUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      Log<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">started server on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, url: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>appUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"start-server\" style=\"position:relative;\"><a href=\"#start-server\" aria-label=\"start server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>start-server</h2>\n<p>그럼 startServer 함수는 어떻게 이루어져있는지 살펴보자.\n코드 전문은 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/src/server/lib/start-server.ts\">여기</a>에서 확인할 수 있다.</p>\n<p>우선 아래와 같이 <code class=\"language-text\">createServer</code>로 웹 서버 객체를 만든다.\n(<a href=\"https://nodejs.org/ko/docs/guides/anatomy-of-an-http-transaction\">node 공식문서</a>에 따르면, 모든 node 웹 서버 애플리케이션은 웹 서버 객체를 만들어야 한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token comment\">// setup server listener as fast as possible</span>\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handlersPromise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> handlersPromise\n        handlersPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token punctuation\">}</span>\n      sockets<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sockets<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">requestHandler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Internal Server Error'</span><span class=\"token punctuation\">)</span>\n      Log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Failed to handle request for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<br/>\n<p>이후 error가 생겼을 때, timeout이 일어났을 때 (keepAliveTimeout 옵션)에 따라 분기처리를 해주다 서버를 실행시켜준다.\n이 때 host와 port가 포함된 appUrl을 생성하고<code class=\"language-text\">Log.ready ..</code> 부분을 통해(실제로는 console.log()함수)\n우리가 실제로 보게 되는 <code class=\"language-text\">ready - started server on 0.0.0.0:${port}, url: http://localhost:${port}</code>을 출력시킴을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          port <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> addr <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> addr<span class=\"token operator\">?.</span>port <span class=\"token operator\">||</span> port <span class=\"token operator\">:</span> port\n\n          <span class=\"token keyword\">let</span> host <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>hostname <span class=\"token operator\">||</span> hostname <span class=\"token operator\">===</span> <span class=\"token string\">'0.0.0.0'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'localhost'</span> <span class=\"token operator\">:</span> hostname\n\n          <span class=\"token keyword\">let</span> normalizedHostname <span class=\"token operator\">=</span> hostname <span class=\"token operator\">||</span> <span class=\"token string\">'0.0.0.0'</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIPv6</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              host <span class=\"token operator\">=</span> host <span class=\"token operator\">===</span> <span class=\"token string\">'::'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'[::1]'</span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span>\n              normalizedHostname <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">}</span>\n          targetHost <span class=\"token operator\">=</span> host\n\n          <span class=\"token keyword\">const</span> appUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isNodeDebugging<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> debugPort <span class=\"token operator\">=</span> <span class=\"token function\">getDebugPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              Log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the --inspect</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n                      isNodeDebugging <span class=\"token operator\">===</span> <span class=\"token string\">'brk'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'-brk'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n                  <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> option was detected, the Next.js proxy server should be inspected at port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>debugPort<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n              <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n\n          Log<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span>\n              <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">started server on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>normalizedHostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n                  <span class=\"token punctuation\">(</span>port <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> <span class=\"token string\">':'</span>\n              <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, url: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>appUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">)</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>서버가 실행되면, <code class=\"language-text\">Log.ready ..</code>  부분을 통해 우리가 실제로 보게 되는 커맨드 라인을 출력시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ready - started server on 0.0.0.0:${port}, url: http://localhost:${port}</code></pre></div>\n<br/>\n<blockquote>\n<p>Next.js 코드를 뜯어본 건 처음인데 살펴본 파일의 모든 코드를 완벽하게 이해하기는 쉽지않았지만 그래도 더듬더듬.. 큼직한 줄기 중심으로 읽어나가는 재미가 있었다.\nNext.js를 현업에서 사용하고 있지는 않지만 공식문서 번역에도 참여해보고 앞으로 진행할 사이드 프로젝트에서도 사용하게 된 만큼 동작 원리를 생각하며 더 가까워지기를!</p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></li>\n<li><a href=\"#packagejson\">package.json</a></li>\n<li><a href=\"#next-startts\">next-start.ts</a></li>\n<li><a href=\"#start-server\">start-server</a></li>\n</ul>\n</div>","excerpt":"들어가며 흔히 local 환경에서 Next.js 프로젝트를 만들고 를 실행하면 command line에 아래의 흐름대로 표기된다. 그렇다면 뒷편에선 코드가 어떻게 돌아가고 있을까? package.json Next.js 공식 문서에 따르면,\n새로운 프로젝트를 만들 때 필요한 패키지 설치 후 에 아래 내용을 수동으로 추가하라고 안내하고 있다. 이 중 주목할 스크립트는 로, 해당 스크립트를 입력하면  코드가 실행된다. yarn start 혹은 npm run start으로 입력하면 된다. next-start.ts 코드가 실행되면 그 이후엔 어떤 파일을 실행시킬까 살펴보니  경로에 가 있었다.\n코드를 보니 next start 뒤에 위치하는 옵션 command에 대한 안내를 해주는 로직, 혹여나 잘못 입력했을 때 경고 및 프로세스를 종료하는 로직 등이 담겨있다. 그리고 가장 하단에서 라는 함수를 실행시켜 준다. 정확한 버전은 모르지만 작년 무렵만 해도 아래처럼 바로 startServer 함수…","frontmatter":{"date":"July 02, 2023","title":"Next.js에서 yarn start를 실행하면 어떻게 될까","categories":"Next.JS","author":"Bomdong","emoji":"🚀"},"fields":{"slug":"/next-js-yarn-start/"}},"next":{"id":"d2974815-e095-5905-be88-bb8838dcaee3","html":"<h2 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h2>\n<p>알고리즘 스터디 중 많은 혼선을 겪었던 DFS, 그 중 응용되는 범위가 넓은 만큼 헷갈리기도 했던 순열과 조합 파트를 정리해본다. <br/></p>\n<blockquote>\n<p><code class=\"language-text\"> DFS(Depth-First Search, 깊이 우선 탐색)</code> <br/>\n한 경로를 따라 가능한만큼 멀리까지 탐색하고, 더 이상 갈 곳이 없을 때 되돌아와 다른 경로로 탐색을 진행하는 방식.</p>\n</blockquote>\n<h2 id=\"순열-permutation\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%97%B4-permutation\" aria-label=\"순열 permutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순열 (Permutation)</h2>\n<h3 id=\"정의\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<p>주어진 요소들을 나열하는 모든 <strong>순서</strong>를 구하는 것. 서로 다른 n개에서 r개를 고르는 순열은 nPr로 표기한다. <br/>\n요소의 순서가 다르면 다른 경우로 취급하기 때문에 <code class=\"language-text\">1,2</code>과 <code class=\"language-text\">2,1</code>같이 같은 요소라도 다른 순서이면 별개의 경우로 취급한다.</p>\n<h3 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h3>\n<p>DFS를 활용해 순열을 구현할 땐 아래의 단계를 따른다.</p>\n<ol>\n<li>\n<p>재귀 함수를 사용해 DFS를 구현한다.</p>\n</li>\n<li>\n<p>순열을 구하는 함수는 탐색할 배열과 주어진 순열의 길이를 매개변수로 받는다.</p>\n</li>\n<li>\n<p>DFS 함수에서 현재까지 구한 순열의 길이가 주어진 값과 같을 때 : 구한 순열을 저장하고 탐색을 종료한다.</p>\n</li>\n<li>\n<p>DFS 함수에서 현재까지 구한 순열의 길이가 주어진 값과 다를 때 : (아직 사용하지않은 요소라면 해당 요소에 check를 하고) 재귀로 DFS를 호출한다. DFS 호출이 끝난 후엔 check를 해제한다.</p>\n</li>\n</ol>\n<p>여러 과일이 나열된 아래의 배열에서 두 개의 과일을 뽑는 순열을 구해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPermutation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">//4</span>\n  <span class=\"token keyword\">let</span> checkArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0,0,0,0]</span>\n  <span class=\"token keyword\">let</span> caseArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> r<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0,0]</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">L</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L</span><span class=\"token operator\">===</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 현재까지 구한 순열의 길이가 주어진 값과 같을 때</span>\n      answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>caseArr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 현재까지 구한 순열의 길이가 주어진 값과 다를 때</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>checkArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          checkArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n          caseArr<span class=\"token punctuation\">[</span><span class=\"token constant\">L</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          checkArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getPermutation</code> 함수는 <code class=\"language-text\">DFS</code> 함수를 호출한다.</p>\n<p>이 <code class=\"language-text\">DFS</code> 함수는 현재까지 구한 순열의 길이가 주어진 값과 같을 때 배열 <code class=\"language-text\">answer</code>에 순열을 저장한다.</p>\n<p>주어진 값과 다를 땐 주어진 배열을 순회하며 1) 순회하는 요소의 사용 여부를 check한 뒤 2) 순열에 저장하고 3) 순열의 길이를 +1해 <code class=\"language-text\">DFS</code>를 재귀로 호출하고 4) 호출 후엔 check를 해제한다. <br/></p>\n<p>각 요소의 사용 여부는 배열 <code class=\"language-text\">checkArr</code>에 관리한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getPermutation</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍎'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍎'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍎'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>같은 과일이라도 순서가 다르면 다른 값으로 인식해 총 12가지의 순서가 리턴된다.</p>\n<h2 id=\"조합-combination\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%95%A9-combination\" aria-label=\"조합 combination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조합 (Combination)</h2>\n<h3 id=\"정의-1\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%9D%98-1\" aria-label=\"정의 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정의</h3>\n<p>서로 다른 n개에서 순서와 상관없이 r개를 고르는 것. nCr로 표기한다.\n순열과의 차이는 순서가 중요하지 않다는 것. <code class=\"language-text\">1,2</code>과 <code class=\"language-text\">2,1</code>은 순열에선 각각 별개의 경우로 취급되었지만, 조합에선 동일한 경우로 취급된다.</p>\n<h3 id=\"구현-1\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-1\" aria-label=\"구현 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h3>\n<p>DFS를 활용해 순열을 구현할 땐 아래의 단계를 따른다.</p>\n<ol>\n<li>\n<p>재귀 함수를 사용해 DFS를 구현한다.</p>\n</li>\n<li>\n<p>조합을 구하는 함수는 탐색할 배열과 구할 조합의 크기를 매개변수로 받는다.</p>\n</li>\n<li>\n<p>DFS 함수에서 현재까지 구한 요소들의 길이가 주어진 조합 크기와 같을 때 : 구한 조합을 저장하고 탐색을 종료한다.</p>\n</li>\n<li>\n<p>DFS 함수에서 현재까지 구한 요소들의 길이가 주어진 조합 크기와 다를 때 : 재귀로 DFS를 호출한다.</p>\n</li>\n</ol>\n<p>순열과 동일한 예시로, 아래의 배열에서 과일 두 개를 뽑는다고 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"코드-1\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-1\" aria-label=\"코드 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCombination</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DFS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">currComb<span class=\"token punctuation\">,</span> start</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currComb<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currComb<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            currComb<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>currComb<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            currComb<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getCombination</code> 함수는 <code class=\"language-text\">DFS</code> 함수를 호출한다.</p>\n<p>이 <code class=\"language-text\">DFS</code> 함수는 현재까지 선택한 조합인 <code class=\"language-text\">currComb</code> 배열과 순회시작 index <code class=\"language-text\">start</code>를 매개변수로 받는다.\n<code class=\"language-text\">currComb</code>의 길이가 r과 같으면 조합을 구한 것이므로 배열 <code class=\"language-text\">result</code>에 저장한다.</p>\n<p>주어진 값과 다를 땐 배열에서 start부터 n번째 값을 순회하며 1) 순회하는 요소를 현재 조합배열인 <code class=\"language-text\">currComb</code> 배열에 저장하고 2) 배열의 다음 요소를 순회하기 위해 순회 순서를 +1해 DFS를 호출한다. 3) currComb를 pop해서 갱신한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'🍎'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍌'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍍'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'🍈'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">getCombination</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   [ '🍎', '🍌' ],</span>\n<span class=\"token comment\">//   [ '🍎', '🍍' ],</span>\n<span class=\"token comment\">//   [ '🍎', '🍈' ],</span>\n<span class=\"token comment\">//   [ '🍌', '🍍' ],</span>\n<span class=\"token comment\">//   [ '🍌', '🍈' ],</span>\n<span class=\"token comment\">//   [ '🍍', '🍈' ]</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>다른 순서라도 요소가 같으면 동일한 경우로 취급되기 때문에 순열의 절반인 6가지가 리턴된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%88%9C%EC%97%B4-permutation\">순열 (Permutation)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EC%9D%98\">정의</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%ED%98%84\">구현</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A1%B0%ED%95%A9-combination\">조합 (Combination)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EC%9D%98-1\">정의</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%ED%98%84-1\">구현</a></p>\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C-1\">코드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 21, 2023","title":"순열과 조합 Javascript로 구현하기","categories":"Algorithm","author":"Bomdong","emoji":"🧺"},"fields":{"slug":"/permutation-and-combination/"}},"prev":{"id":"85d1706e-ea4f-5574-add5-e77b6909af12","html":"<p>올해 2월부터 7월까지, 6개월동안 진행한 글또 8기 활동이 마무리되었다.</p>\n<blockquote>\n<p><strong>글또</strong> <br/>\n개발 직군에 속한 회원들이 일정 금액을 예치하고 2주에 한 번씩 블로그 포스팅 + 인증을 하는 형태로 운영되는 커뮤니티.\n직군별로 자체 컨퍼런스, 랜덤 오프라인 만남도 진행된다.</p>\n</blockquote>\n<p>처음엔 기술블로그에 주기적으로 글쓰는 습관을 길러보자라는 패기 반,\n6개월이란 시간동안 2주에 한 번씩 꾸준히 포스팅 할 수 있을까란 걱정 반으로 시작했는데 어느새 6개월이 지났다.\n그 기간동안 느낀 좋았던 점과 아쉬웠던 점, 그리고 앞으로의 실행 계획에 대해서 적어보는 글.</p>\n<h2 id=\"만족한-점\" style=\"position:relative;\"><a href=\"#%EB%A7%8C%EC%A1%B1%ED%95%9C-%EC%A0%90\" aria-label=\"만족한 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>만족한 점</h2>\n<h3 id=\"꾸준히-다양한-주제로-글쓰기\" style=\"position:relative;\"><a href=\"#%EA%BE%B8%EC%A4%80%ED%9E%88-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%A3%BC%EC%A0%9C%EB%A1%9C-%EA%B8%80%EC%93%B0%EA%B8%B0\" aria-label=\"꾸준히 다양한 주제로 글쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>꾸준히 다양한 주제로 글쓰기</h3>\n<p>앞서 적었듯이 활동을 시작할 때부터 걱정했던 격주 포스팅. <br/>\n다행히 과거의 나는 2주 간격으로 꾸준히 포스팅을 해나갔고 예치금 차감없이 활동을 마무리지을 수 있게 되었다 🥳(물론 주어진 패스권 2회도 야무지게 활용했다.)</p>\n<h4 id=\"글또-활동을-하며-작성한-글\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%98%90-%ED%99%9C%EB%8F%99%EC%9D%84-%ED%95%98%EB%A9%B0-%EC%9E%91%EC%84%B1%ED%95%9C-%EA%B8%80\" aria-label=\"글또 활동을 하며 작성한 글 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글또 활동을 하며 작성한 글</h4>\n<ul>\n<li><a href=\"https://dev-bomdong.github.io/css-unicode-range/\">unicode-range로 언어(문자)에 따라 다른 폰트 적용하기</a></li>\n<li><a href=\"https://dev-bomdong.github.io/regexp/\">정규 표현식 톺아보기</a></li>\n<li><a href=\"https://dev-bomdong.github.io/functional-programming-concept/\">함수형 프로그래밍 | 액션, 계산, 데이터</a></li>\n<li><a href=\"https://dev-bomdong.github.io/functional-programming-refactoring/\">함수형 프로그래밍 | 액션 리팩토링하기</a></li>\n<li><a href=\"https://dev-bomdong.github.io/js-function-invocation-and-this/\">[번역] 자바스크립트 함수 호출과 “this” 이해하기</a></li>\n<li><a href=\"https://dev-bomdong.github.io/reactnode-react-element-jsx-element/\">ReactNode, ReactElement 그리고 JSX.Element</a></li>\n<li><a href=\"https://dev-bomdong.github.io/permutation-and-combination/\">순열과 조합 Javascript로 구현하기</a></li>\n<li><a href=\"https://dev-bomdong.github.io/next-js-yarn-start/\">Next.js에서 yarn start를 실행하면 어떻게 될까</a></li>\n</ul>\n<p>글감을 찾는게 마냥 쉽지는 않았는데, 일/스터디 등 일상 속에서 떠오르는 주제를 개인 노션에 적어두고 하나씩 골라 쓰고는 했다.\n예를 들어 함수형 프로그래밍은 사내 스터디를 할 때, 순열과 조합은 알고리즘 스터디를 할 때, unicode-range나 정규표현식 등은 업무 중 떠올린 주제들이였다.\n너무 비슷한 주제/형태로만 글을 작성하지않도록 신경썼는데, 이렇게 모아보니 꽤나 반영이 된 것 같아 뿌듯하다.</p>\n<h3 id=\"커피드백으로-시야-넓히기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%ED%94%BC%EB%93%9C%EB%B0%B1%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%95%BC-%EB%84%93%ED%9E%88%EA%B8%B0\" aria-label=\"커피드백으로 시야 넓히기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커피드백으로 시야 넓히기</h3>\n<p>처음엔 단순히 글쓰기 커뮤니티인줄로만 알았는데 커피드백이라는 신기한 활동도 있었다. <br/>\n같은 직군에 종사하시는 분들끼리 랜덤으로 조를 짜서 만나는 오프라인 모임!</p>\n<p>커피드백 덕분에 다른 회사는 어떤 개발 문화를 가지고 어떻게 일하는지 들으며 업계를 바라보는 시야를 넓히기도 하고,\n동일한 직군으로 일하는 분들이 어떤 생각과 고민을 가지고 있는지 대화하며 깊은 공감도, 위로도 나눴다.</p>\n<p>특히 최근 (거센 비를 뚫고 평일 저녁에) 이루어진 커피드백에선 요즘 가지고 있던 고민을 털어놓고 조언을 듣기도 하고, 책을 추천받기도 해서 참 귀한 시간이였다.</p>\n<h2 id=\"다소-아쉬운-점\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%86%8C-%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"다소 아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다소 아쉬운 점</h2>\n<h3 id=\"벼락치기-업로드\" style=\"position:relative;\"><a href=\"#%EB%B2%BC%EB%9D%BD%EC%B9%98%EA%B8%B0-%EC%97%85%EB%A1%9C%EB%93%9C\" aria-label=\"벼락치기 업로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>벼락치기 업로드</h3>\n<p>사실 6개월 동안 2주에 한 포스팅을 업로드한다고 했을 때 첫 번째 주엔 글감 디벨롭+초안 작성,\n두 번째 주엔 초안을 다듬어 여유롭게 완성하는 습관을 차차 가지게 될 줄 알았는데 내 착각이였다.\n여전히 두 번째 주에 후다닥 시작해 일요일에 업로드하는 벼락치기임을..</p>\n<h2 id=\"앞으로의-실행-계획\" style=\"position:relative;\"><a href=\"#%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%EC%8B%A4%ED%96%89-%EA%B3%84%ED%9A%8D\" aria-label=\"앞으로의 실행 계획 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앞으로의 실행 계획</h2>\n<h3 id=\"글또-9기---업로드-습관-신경쓰기\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EB%98%90-9%EA%B8%B0---%EC%97%85%EB%A1%9C%EB%93%9C-%EC%8A%B5%EA%B4%80-%EC%8B%A0%EA%B2%BD%EC%93%B0%EA%B8%B0\" aria-label=\"글또 9기   업로드 습관 신경쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글또 9기 - 업로드 습관 신경쓰기</h3>\n<p>6개월간의 활동에서 얻은게 많아 곧 진행될 글또 9기에도 참여하려 한다.\n이 땐 업로드 습관 신경쓰기! 1주만에 후루룩 쓰기보다 조금 더 여유로운 호흡으로 작성하는 습관을 들이고 싶다.</p>\n<h3 id=\"기술블로그-리뉴얼\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A6%AC%EB%89%B4%EC%96%BC\" aria-label=\"기술블로그 리뉴얼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기술블로그 리뉴얼</h3>\n<p>Tistory에서 보다 커스텀이 용이한 gatsby로 플랫폼을 변경한 이후 블로그를 들어올 때마다 이래저래 아쉬운 점이 보였다.\n또 다른 분들의 다양한 블로그를 방문하다보니 나도 이런 식으로 고쳐보고싶다는 자극도 들었다.\n사실 지금도 UI요소를 조금씩 바꿔나가고 있지만, 올해 하반기 중에 본격적으로 기술블로그 리뉴얼 해볼것!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%A7%8C%EC%A1%B1%ED%95%9C-%EC%A0%90\">만족한 점</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%BE%B8%EC%A4%80%ED%9E%88-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%A3%BC%EC%A0%9C%EB%A1%9C-%EA%B8%80%EC%93%B0%EA%B8%B0\">꾸준히 다양한 주제로 글쓰기</a></p>\n<ul>\n<li><a href=\"#%EA%B8%80%EB%98%90-%ED%99%9C%EB%8F%99%EC%9D%84-%ED%95%98%EB%A9%B0-%EC%9E%91%EC%84%B1%ED%95%9C-%EA%B8%80\">글또 활동을 하며 작성한 글</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BB%A4%ED%94%BC%EB%93%9C%EB%B0%B1%EC%9C%BC%EB%A1%9C-%EC%8B%9C%EC%95%BC-%EB%84%93%ED%9E%88%EA%B8%B0\">커피드백으로 시야 넓히기</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%86%8C-%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\">다소 아쉬운 점</a></p>\n<ul>\n<li><a href=\"#%EB%B2%BC%EB%9D%BD%EC%B9%98%EA%B8%B0-%EC%97%85%EB%A1%9C%EB%93%9C\">벼락치기 업로드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%95%9E%EC%9C%BC%EB%A1%9C%EC%9D%98-%EC%8B%A4%ED%96%89-%EA%B3%84%ED%9A%8D\">앞으로의 실행 계획</a></p>\n<ul>\n<li><a href=\"#%EA%B8%80%EB%98%90-9%EA%B8%B0---%EC%97%85%EB%A1%9C%EB%93%9C-%EC%8A%B5%EA%B4%80-%EC%8B%A0%EA%B2%BD%EC%93%B0%EA%B8%B0\">글또 9기 - 업로드 습관 신경쓰기</a></li>\n<li><a href=\"#%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A6%AC%EB%89%B4%EC%96%BC\">기술블로그 리뉴얼</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 16, 2023","title":"글또 8기를 마무리하며","categories":"회고록","author":"Bomdong","emoji":"✏️"},"fields":{"slug":"/journal-epilogue-of-gueltto/"}},"site":{"siteMetadata":{"siteUrl":"https://dev-bomdong.github.io","comments":{"utterances":{"repo":"dev-bomdong/dev-bomdong.github.io"}}}}},"pageContext":{"slug":"/next-js-yarn-start/","nextSlug":"/permutation-and-combination/","prevSlug":"/journal-epilogue-of-gueltto/"}},"staticQueryHashes":["1073350324","2009502679","2938748437"],"slicesMap":{}}